#!/bin/bash

# ########################################################################################
# 常见的重定向问题的几个问题
# 在 shell 程式中，最常使用的 FD (file descriptor) 大概有三个, 分别是:
# 0 是一个文件描述符，表示标准输入(stdin)
# 1 是一个文件描述符，表示标准输出(stdout)
# 2 是一个文件描述符，表示标准错误(stderr)
#
# 在标准情况下, 这些FD分别跟如下设备关联: 
# stdin(0): keyboard 键盘输入,并返回在前端 
# stdout(1): monitor 正确返回值 输出到前端 
# stderr(2): monitor 错误返回值 输出到前端
#
# common 1>&2 或 common >&2     意思是把标准输出重定向到标准错误.
# common 2>&1                   意思是把标准错误输出重定向到标准输出。
# common &>filename             意思是把标准输出和标准错误输出都重定向到文件filename中
# common > /dev/null 2>&1       意思是把标准输出和标准错误输出都丢弃到/dev/null，其中/dev/null可以理解为linux中不可以恢复的垃圾筒
# & 是一个描述符，如果1或2前不加&，会被当成一个普通文件。
# 
# 扩展：
# >&n 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出
# <&n 标准输入复制自文件描述符 n
# <&- 关闭标准输入（键盘）
# >&- 关闭标准输出
# n<&- 表示将 n 号输入关闭
# n>&- 表示将 n 号输出关闭

# exec N<>filename 将文件描述符N的输入/输出与filename绑定
# exec 1>outfilename  # 打开文件outfilename作为stdout。
# exec 2>errfilename  # 打开文件errfilename作为 stderr。
# exec 0<&- # 关闭 标准输入。
# exec 1>&- # 关闭 标准输出。
# exec 2>&- # 关闭 错误输出。
# ########################################################################################
